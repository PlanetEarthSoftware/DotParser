{

[<AutoOpen>]
module internal DotParser.Lexer

open DotParser.Parser
open Microsoft.FSharp.Text.Lexing

let lexeme = LexBuffer<_>.LexemeString

let keywords =
    [
        "graph", GRAPH;
        "digraph", DIGRAPH;
        "strict", STRICT;
        "subgraph", SUBGRAPH;
        "node", NODE;
        "edge", EDGE;
    ] |> Map.ofList

}

let digit = ['0'-'9']
let whitespace = [' ' '\t' '\r' '\n']
let id = ['a'-'z' 'A'-'Z' '_'](['a'-'z' 'A'-'Z' '_' '0'-'9'])*|['-']?('.'['0'-'9']+|['0'-'9']+('.'['0'-'9']+)?)
let lineComment = ['/']['/'][^ '\n']*

rule tokenize = parse
| whitespace { tokenize lexbuf }
| '"'  { ID ( (string lexbuf.StartPos "" lexbuf) ) }
| '{'  { LBRACE <| lexeme lexbuf }
| '}'  { RBRACE <| lexeme lexbuf }
| '['  { LBRACK <| lexeme lexbuf }
| ']'  { RBRACK <| lexeme lexbuf }
| '='  { ASSIGN <| lexeme lexbuf }
| ':'  { COLON  <| lexeme lexbuf }
| ';'  { tokenize lexbuf }
| ','  { tokenize lexbuf }
| "--" { EDGE   <| lexeme lexbuf }
| "->" { DIEDGE <| lexeme lexbuf }
| id   { match keywords.TryFind((lexeme lexbuf).ToLower()) with
         | Some(keyword) -> keyword <| (lexeme lexbuf).ToLower()
         | None -> ID <| lexeme lexbuf }
| eof  { RNGLR_EOF <| lexeme lexbuf }
| lineComment{ tokenize lexbuf }
| _ { failwithf "unexpected input: %s" <| lexeme lexbuf }

and string pos s = parse
| "\\\""  { string pos (s + "\"") lexbuf }
| "\\n"   { string pos (s + "\n") lexbuf }
| "\\l"   { string pos (s + "\n") lexbuf }
| "\\r"   { string pos (s + "\n") lexbuf }
| "\\\\"  { string pos (s + "\\") lexbuf }
| "\\"    { string pos s lexbuf }
| "\r"    { string pos s lexbuf }
| "\""    { s }
| "\n"    { lexbuf.EndPos <- lexbuf.EndPos.NextLine;
            string pos s lexbuf }
| eof     { failwithf "end of file in string started at or near %A" pos }
| _       { string pos (s + (lexeme lexbuf)) lexbuf }